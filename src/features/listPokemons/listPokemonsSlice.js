import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPokemonsList, fetchPokemonDetail, fetchPokemonStat } from './pokemonsAPI';

const initialState = {
  status: 'idle',
  listPokemons: {},
  pokemonDetail: {},
  pokemonStat: {}
};

export const obtenerListaPokemonsAsync = createAsyncThunk(
  'listPokemons/fetchPokemonsList',
  async () => {
    const response = await fetchPokemonsList();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const obtenerDetallePokemonAsync = createAsyncThunk(
  'listPokemons/fetchPokemonDetail',
  async (name) => {
    const response = await fetchPokemonDetail(name);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const obtenerEstadisticaPokemonAsync = createAsyncThunk(
  'listPokemons/fetchPokemonStat',
  async (statName) => {
    const response = await fetchPokemonStat(statName);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);



export const listPokemonsSlice = createSlice({
  name: 'listPokemons',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(obtenerListaPokemonsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.listPokemons = action.payload
      })
      .addCase(obtenerDetallePokemonAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.pokemonDetail = action.payload
      })
      .addCase(obtenerEstadisticaPokemonAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.pokemonStat = action.payload
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectListPokemons = (state) => state.listPokemons.listPokemons;

export const selectPokemonDetail = (state) => state.listPokemons.pokemonDetail;

export const selectPokemonStat = (state) => state.listPokemons.pokemonStat;


export default listPokemonsSlice.reducer;
